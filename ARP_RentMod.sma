/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <ApolloRP>
#include <ApolloRP_Chat>
#include <sqlx>
#include <fun>

new SQLMODE:g_SQLTYPE
new Handle:g_SqlHandle

new g_RenterAuth[33][36]
new g_RenterName[33][36]
new g_Rentable[33]
new g_RentCost[33]

new g_HUDToggle

public plugin_init() 
{
	
	register_plugin("ARP - Rent Mod", "1.1", "dMoN")
	
	register_concmd("arp_forcerentprice","forceRent",ADMIN_IMMUNITY,"(ADMIN) This command forces the rent of the property being looked at to:")
	register_concmd("arp_resetroom","resetRent",ADMIN_IMMUNITY,"(ADMIN) Takes a rental property off the market forcefully.")
		
	ARP_RegisterEvent("HUD_AddItem","EventHudAddItem")
	new Query[256]
	format(Query,255,"SELECT * FROM arp_rentmod")
	SQL_ThreadQuery(g_SqlHandle,"FetchRented",Query)
	
	ReloadProperties()
	set_task(60.0,"_PruneTask",_,_,_,"b")
}

public ARP_Init()
{

	ARP_RegisterAddon("Rent Mod")
	g_SqlHandle = ARP_SqlHandle()
	
	ARP_AddChat(_,"CmdSay")
	ARP_RegisterEvent("Core_Save", "fnCoreSave")
	new Query[256]
	
	new SqlTypeString[8]
	get_cvar_string("arp_sql_type",SqlTypeString,7)
	if(equali(SqlTypeString,"mysql")) g_SQLTYPE = MYSQL
	else if(equali(SqlTypeString,"sqlite")) g_SQLTYPE = SQLITE
	
	switch(g_SQLTYPE)
	{
		case MYSQL:
			format(Query,255,"CREATE TABLE IF NOT EXISTS arp_rentmod (targetname VARCHAR(36),Ownerauth VARCHAR(36),IsRentable INT(11),RentCost INT(11),Renterauth VARCHAR(40) DEFAULT '',ExpireTime VARCHAR(40) DEFAULT '', UNIQUE (targetname))")
		case SQLITE:
			format(Query,255,"CREATE TABLE IF NOT EXISTS arp_rentmod (targetname VARCHAR(36) PRIMARY KEY,Ownerauth VARCHAR(36),IsRentable INT(11),RentCost INT(11),Renterauth VARCHAR(40),ExpireTime VARCHAR(40))")
	}
	SQL_ThreadQuery(g_SqlHandle,"IgnoreHandle",Query)
	// targetname  Ownerauth  IsRentable RentCost Renterauth ExpireTime
	
	// targetname  Ownerauth  IsRentable RentCost Renterauth ExpireTime
	
}
	
	
	















public CmdSay(id,Mode,Args[])
{
	new Authid[36]
	get_user_authid(id,Authid,35)
	if(equali(Args,"/rent",5))
	{
		ReloadProperties()
		new Index,Body,Targetname[33]
		get_user_aiming(id,Index,Body,200)
		
		if(!Index)
		{
			client_print(id,print_chat,"[ARP] You are not looking at a property.")
			return PLUGIN_HANDLED
		}
		
		entity_get_string(Index,EV_SZ_targetname,Targetname,32)
		if(!ARP_ValidDoorName(Targetname,Index))
		{
			client_print(id,print_chat,"[ARP] You are not looking at a property.")
			return PLUGIN_HANDLED
		}
		
		new Property = ARP_PropertyMatch(Targetname,Index)
		if(!Property)
			return PLUGIN_HANDLED
		new PropertyInternal[36]
		ARP_PropertyGetInternalName(Property,PropertyInternal,35)
				
		if(ARP_PropertyGetOwner(Property) == id)
		{
/// HERE
			if(!Index)
			{
				client_print(id,print_chat,"[ARP] You are not looking at a property.")
				return PLUGIN_HANDLED
			}
			
			entity_get_string(Index,EV_SZ_targetname,Targetname,32)
			
			if(!ARP_ValidDoorName(Targetname,Index))
			{
				client_print(id,print_chat,"[ARP] You are not looking at a property.")
				return PLUGIN_HANDLED
			}
			
			/*new Property = ARP_PropertyMatch(Targetname,Index)
			if(!Property)
				return PLUGIN_HANDLED */
			
						
			if(!equali(g_RenterAuth[Property],""))
			{
				client_print(id,print_chat,"[ARP] You cannot set the rent of this property.")
				return PLUGIN_HANDLED
			}
			
			new StrPrice[64],Temp[2]
				
			parse(Args,Temp,1,StrPrice,63)
			new Price = str_to_num(StrPrice)
			
			if(Price < 0)
			{
				client_print(id,print_chat,"[ARP] You cannot set a property's rent to a negative value.")
				return PLUGIN_HANDLED
			}
			else if(Price > 0)
			{
				new RentCost = Price
				new PropRenter[36] = ""
				new PropExpire[36] = ""
	
				
				
				client_print(id,print_chat,"[ARP] You have put this property for rent at $%i per hour.",Price)
				
				
				g_Rentable[Property] = 1
				g_RentCost[Property] = RentCost
				
				new Query[256]
				
				switch(g_SQLTYPE)
				{
					case MYSQL:
						format(Query,255,"INSERT INTO arp_rentmod VALUES ('%s','%s', 1, %i,'%s','%s') ON DUPLICATE KEY UPDATE IsRentable = 1,RentCost = %i,Renterauth = '%s',ExpireTime = '%s'",Targetname,Authid,RentCost,PropRenter,PropExpire,RentCost,PropRenter,PropExpire)
					case SQLITE:																		//target authid, rentcost rentcost renterauth expiretime 		
						format(Query,255,"INSERT OR REPLACE INTO arp_rentmod VALUES ('%s','%s',%i,%i,'%s','%s')",Targetname,Authid,g_Rentable[Property],g_RentCost[Property],PropRenter,PropExpire)
				}							
				SQL_ThreadQuery(g_SqlHandle,"IgnoreHandle",Query)
				
			}
			else if(Price == 0)
			{
				new Query[256]
				client_print(id,print_chat,"[ARP] You have taken this property down from sale.")
				g_RentCost[Property] = 0
				g_Rentable[Property] = 0
				format(Query,255,"UPDATE arp_rentmod SET IsRentable = 0, RentCost = 0 WHERE targetname= '%s'",Targetname)
				SQL_ThreadQuery(g_SqlHandle,"IgnoreHandle",Query)
			}
			
			return PLUGIN_HANDLED
/// HERE
		} // END  /rent   HANDLING
		
		new StrPrice[64],Temp[2]
		
		new Wallet = (ARP_GetUserWallet(id))
		
		
		new FullCost
		
		parse(Args,Temp,1,StrPrice,63)
		if(strlen(StrPrice) < 0)
		{
			client_print(id,print_chat,"^n[ARP] Type property is priced at $%s/hour.")
			client_print(id,print_chat,"^n[ARP] Type /rent <#of hours> to rent this property") 
			return PLUGIN_HANDLED
		}
		
		
		
		
		new RentHours = str_to_num(StrPrice)
		if(g_Rentable[Property] == 0 || g_RentCost[Property] == 0)
		{
			client_print(id,print_chat,"[ARP] This property is not up for rent.")
			return PLUGIN_HANDLED
		}
		
		if(RentHours && g_RentCost[Property] > 0)
		{
			new Authid[36]
			get_user_authid(id,Authid,35)
			FullCost = (RentHours * g_RentCost[Property])
			
			if(Wallet < FullCost)
			{
				client_print(id,print_chat,"[ARP] You do not have enough money to pay your rent.")
				return PLUGIN_HANDLED
			}
			else
			{
				ARP_SetUserWallet(id,Wallet-FullCost)
				client_print(id,print_chat,"[ARP] You have rented this property for %d hours.",RentHours)
								
				new Tid,Body,CurrentTime[36],NewTime[36],Targetname[36],PropertyInternal[36],Person[36]
				get_user_aiming(id,Tid,Body,500)
				entity_get_string(Tid,EV_SZ_targetname,Targetname,35)
				new Property = ARP_PropertyMatch(Targetname)
				
				if(!Property)
					return PLUGIN_HANDLED
				
				new OldProfit 
				OldProfit = ARP_PropertyGetProfit(Property)
				OldProfit = OldProfit + FullCost
				ARP_PropertySetProfit(Property,OldProfit)
				
				
				get_user_name(id,Person,35)
				copy(g_RenterName[Property],35,Person)
				ARP_GiveKey(Property,id)
				ARP_PropertyGetInternalName(Property,PropertyInternal,35)
				get_time("%d %H %M",CurrentTime,35)
				new _Day[16],_Hour[16],_Minute[16]
				new day,hour,minute
				parse(CurrentTime,_Day,15,_Hour,15,_Minute,15)
				day = str_to_num(_Day)
				hour = str_to_num(_Hour)
				minute = str_to_num(_Minute)
				minute = minute + (60 * RentHours)
				while(minute > 60)
				{
					hour++
					minute = minute - 60
				}
								
				
				format(NewTime,35,"%i:%i",hour,minute)
				
				client_print(id,print_chat,"[ARP] You are renting this property until %s",NewTime)
				copy(g_RenterAuth[Property],35,Authid)
				g_Rentable[Property] = 0
				format(NewTime,35,"%i %i %i",day,hour,minute)
				
				new Query[256]
				switch(g_SQLTYPE)
				{
					case MYSQL:
						format(Query,255,"UPDATE arp_rentmod SET IsRentable = 0,Renterauth = '%s',ExpireTime = '%s' WHERE targetname = '%s'", Authid, NewTime, Targetname)
					case SQLITE:
						format(Query,255,"INSERT OR REPLACE INTO arp_rentmod (targetname,IsRentable,RentCost,Renterauth,ExpireTime) VALUES ('%s',%i,%i,'%s','%s')",Targetname,g_Rentable[Property],g_RentCost[Property],g_RenterAuth[Property],NewTime)
				}				// targetname  Ownerauth  IsRentable RentCost Renterauth ExpireTime
				SQL_ThreadQuery(g_SqlHandle,"IgnoreHandle",Query)
				
				ReloadProperties()
				
				return PLUGIN_HANDLED
			}
		}
		else
		{
			client_print(id,print_chat,"[ARP] You must rent this property for more than 1 hour.")
		}
		
		return PLUGIN_HANDLED
	}
	return PLUGIN_CONTINUE	
}































public ReloadProperties()
{
	new Query[256]
	format(Query,255,"SELECT * FROM arp_rentmod")
	SQL_ThreadQuery(g_SqlHandle,"ReloadPropHandle",Query)
	//client_print(0,print_chat,"[DEBUG] RELOADING RENTABLE PROPERTIES:")
}


public ReloadPropHandle(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
	if(FailState == TQUERY_CONNECT_FAILED)
		return set_fail_state("Could not connect to SQL database.")
	else if(FailState == TQUERY_QUERY_FAILED)
		return set_fail_state("Internal error: ReloadPropHandle BAD")
	
	if(Errcode)
		return log_amx("Error on query: %s",Error)
		
	new Targetname[36],RealOwner[36]
	// targetname  Ownerauth  IsRentable RentCost Renterauth ExpireTime
	while(SQL_MoreResults(Query))
	{ 
		SQL_ReadResult(Query,0,Targetname,35)
		SQL_ReadResult(Query,1,RealOwner,35)
		
		new Property = ARP_PropertyMatch(Targetname)
		if(!Property)
		{
			return PLUGIN_HANDLED
		}
		
		
		g_Rentable[Property] = SQL_ReadResult(Query,2)
		g_RentCost[Property] = SQL_ReadResult(Query,3)
		SQL_ReadResult(Query,4,g_RenterAuth[Property],35)
		
		
		SQL_NextRow(Query)
	}
	return PLUGIN_CONTINUE
}

















































public _PruneTask()
{
	new Query[256]
	format(Query,255,"SELECT * FROM arp_rentmod")
	SQL_ThreadQuery(g_SqlHandle,"FetchRented",Query)
	//client_print(0,print_chat,"[DEBUG] Pruning")
	
}

public FetchRented(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
	if(FailState == TQUERY_CONNECT_FAILED)
		return set_fail_state("Could not connect to SQL database.")
	else if(FailState == TQUERY_QUERY_FAILED)
		return set_fail_state("Internal error: consult developer.")
	
	if(Errcode)
		return log_amx("Error on query: %s",Error)
	
	new Authid[36],ExpireTime[36],Targetname[36],RenterAuth[36],CurrTime[33]
	while(SQL_MoreResults(Query))
	{ 
		SQL_ReadResult(Query,0,Targetname,35)
		SQL_ReadResult(Query,1,Authid,35)
		
		SQL_ReadResult(Query,4,RenterAuth,35)
		SQL_ReadResult(Query,5,ExpireTime,35)
		// targetname  Ownerauth  IsRentable RentCost Renterauth ExpireTime
		
		
		new _day[25],_hour[25],_minute[25]
		new day,hour,minute
		
		get_time("%d %H %M",CurrTime,32)
		parse(CurrTime,_day,24,_hour,24,_minute,24)
		
		
		day = str_to_num(_day)
		
		hour = str_to_num(_hour)
		minute = str_to_num(_minute)
		
		
		// Second Set, Comparison from SQL
		
			
		new _day2[25],_hour2[25],_minute2[25]
		new day2,hour2,minute2
		
		
		parse(ExpireTime,_day2,24,_hour2,24,_minute2,24)
		
		day2 = str_to_num(_day2)
		if(!day2)
		{
			SQL_NextRow(Query)
			continue
		}
		
		hour2 = str_to_num(_hour2)
		minute2 = str_to_num(_minute2)
		
		new RemoveBool = 0
		if(day == day2)
		{
			if(hour > hour2)
			{
				RemoveBool = 1
			}
			else if(hour == hour2)
			{
				if(minute > minute2)
				{
					RemoveBool = 1
				}
			}
		}
		else if(day > day2)
		{
			RemoveBool = 1
		}
		
		if(RemoveBool == 1)
		{
			new Query2[256],InternalName[36]
			new Property = ARP_PropertyMatch(Targetname)
			if(!Property)
			{
				//client_print(0,print_chat,"[DEBUG] Not finding property in Remove")
				return PLUGIN_HANDLED
			}
			ARP_PropertyGetInternalName(Property,InternalName,35)
			ARP_PropertyRemoveAccess(Property,RenterAuth)
			
			format(Query2,255,"DELETE FROM arp_rentmod WHERE targetname = '%s'",Targetname)
			SQL_ThreadQuery(g_SqlHandle,"IgnoreHandle",Query2)
			g_Rentable[Property] = 0
			copy(g_RenterAuth[Property],35,"")
			// targetname  Ownerauth  IsRentable RentCost Renterauth ExpireTime
			//client_print(0,print_chat,"[DEBUG] Deleting %s|%s",RenterAuth,InternalName)
		}
		else
		{
			//client_print(0,print_chat,"[DEBUG] Not deleting shit, nigger.")
		}
		SQL_NextRow(Query)
	}
	return PLUGIN_CONTINUE
}



public IgnoreHandle(FailState,Handle:Query,Error[],Errcode,Data[],DataSize) 
{
	if(FailState == TQUERY_CONNECT_FAILED)
		return log_amx("Could not connect to SQL database.")
	else if(FailState == TQUERY_QUERY_FAILED)
		return log_amx("Internal error: consult developer. Error: %s",Error)
	
	if(Errcode)
		return log_amx("Error on query: %s",Error)
	
	return PLUGIN_CONTINUE
}

public EventHudAddItem(Name[],Data[],Len)
{
	new Classname[36]
	if(g_HUDToggle)
	{
		g_HUDToggle = 0
		return PLUGIN_CONTINUE
	}
	
	// The job/name only goes to the quaternary HUD
	if(Data[1] != HUD_QUAT) return PLUGIN_CONTINUE
	
	//client_print(Data[0],print_chat,"blah")
	
	new id = Data[0]
	if(!is_user_alive(id)) return PLUGIN_CONTINUE
	
	new Body,Index
	get_user_aiming(id,Index,Body,400)
	entity_get_string(Index,EV_SZ_classname,Classname,35)
	
	if(!is_valid_ent(Index)) return PLUGIN_CONTINUE
	if(equali(Classname,"func_door") || equali(Classname,"func_door_rotating"))
	{
		if(containi(Data[2],"Status:") != -1 || containi(Data[2],"Owner:") != -1)
		{
			g_HUDToggle = 1
			
			new Targetname[36],ExternalName[36],OwnerAuth[36]
			entity_get_string(Index,EV_SZ_targetname,Targetname,35)
			
			new Property = ARP_PropertyMatch(Targetname)
			if(!Property)
			{
				//client_print(0,print_chat,"HudRenderFailed ::  Property Match")
				return PLUGIN_CONTINUE
			}
			
			ARP_PropertyGetExternalName(Property,ExternalName,35)
			ARP_PropertyGetOwnerAuth(Property,OwnerAuth,35)
			
			if(g_Rentable[Property] == 1)
			{
				static Msg[256]
				format(Msg,255,"For Rent by Owner^nPrice: $%i per hour^nType /rent <#ofHours> to purchase",g_RentCost[Property])
				
				ARP_ClientPrint(id,Msg)
				return PLUGIN_HANDLED
			}
			else
			{
				if(g_Rentable[Property] == 1 && g_RentCost[Property] > 0)
				{
					static Msg[256]
					format(Msg,255,":: For Rent ::^nPrice: %i per hour^nType /rent <#ofHours> to purchase",g_RentCost[Property])
					ARP_ClientPrint(id,Msg)
					return PLUGIN_HANDLED
				}
				else if(!equali(g_RenterAuth[Property],""))
				{
					
					if(equali(g_RenterName[Property],""))
					{
						g_RenterName[Property] = g_RenterAuth[Property]
					}
					for(new i=0;i<33;i++)
					{
						new Auth2[36]
						get_user_authid(i,Auth2,35)
						if(equali(g_RenterAuth[Property],Auth2))
						{
							get_user_name(i,g_RenterName[Property],35)
						}
					}
										
					static Msg[256]
					format(Msg,255,"This property is currently rented by:^n%s",g_RenterName[Property])
					ARP_ClientPrint(id,Msg)
					return PLUGIN_HANDLED
				}
			}
		}
		else
		{
			return PLUGIN_CONTINUE
		}
	}
	//client_print(0,print_chat,"HudRenderFailed ::  No Door Found")
	return PLUGIN_CONTINUE
}


public forceRent(id,level,cid)
{
	if(!access(id,ADMIN_IMMUNITY))
		return PLUGIN_HANDLED
		
	
	new Index,Body,TargetName[36],Classname[36],NewRentAmount
	
	get_user_aiming(id,Index,Body,500)
	
	entity_get_string(Index,EV_SZ_targetname,TargetName,35)
	entity_get_string(Index,EV_SZ_classname,Classname,35)
	
	if(!equali(Classname,"func_door") && !equali(Classname,"func_door_rotating"))
	{
		return PLUGIN_HANDLED
	}
	new Property = ARP_PropertyMatch(TargetName)
	if(!Property)
	{
		return PLUGIN_HANDLED
	}
	new Arg1[6]
	read_argv(1,Arg1,5)
	NewRentAmount = str_to_num(Arg1)
	
	g_RentCost[Property] = NewRentAmount
	client_print(id,print_console,"[ARP - RentMod] Property: %i Has been set to: %i Rent.",Property,NewRentAmount)
	
	return PLUGIN_HANDLED
}

public resetRent(id, level, cid)
{
	if(!access(id,ADMIN_IMMUNITY))
		return PLUGIN_HANDLED
		
	new Index,Body,TargetName[36],Classname[36]
	
	get_user_aiming(id,Index,Body,500)
	
	entity_get_string(Index,EV_SZ_targetname,TargetName,35)
	entity_get_string(Index,EV_SZ_classname,Classname,35)
	
	if(!equali(Classname,"func_door") && !equali(Classname,"func_door_rotating"))
	{
		return PLUGIN_HANDLED
	}
	new Property = ARP_PropertyMatch(TargetName)
	if(!Property)
	{
		return PLUGIN_HANDLED
	}
			
	g_Rentable[Property] = 0
	g_RentCost[Property] = 0
	copy(g_RenterAuth[Property],35,"")
	copy(g_RenterName[Property],35,"")
	
	new Query2[256]
	format(Query2,255,"DELETE FROM arp_rentmod WHERE targetname='%s'",TargetName)
	SQL_ThreadQuery(g_SqlHandle,"IgnoreHandle",Query2)
	
	client_print(id,print_console,"[ARP - RentMod] Property: %i Has been reset.",Property)
	
	return PLUGIN_HANDLED
}


public fnCoreSave()
{
	ReloadProperties()
	_PruneTask()
}

/* OLD HUD RENDER
public EventHudRender(Name[],Data[],Len)
{
	new id = Data[0]
	if(!is_user_alive(id) || Data[1] != HUD_QUAT)
		return
	
	new Authid[36]
	get_user_authid(id,Authid,35)
		
	new Index,Body,Targetname[36],Classname[36]
	
	get_user_aiming(id,Index,Body,500)
	entity_get_string(Index,EV_SZ_classname,Classname,35)
	entity_get_string(Index,EV_SZ_targetname,Targetname,35)
	
	new Property = ARP_PropertyMatch(Targetname)
	if(!Property)
	{
		return
	}
	new Ownerz[36]
	ARP_PropertyGetOwnerAuth(Property,Ownerz,35)
	
	if(is_valid_ent(Index))
	{
		if(equali(Classname,"func_door") || equali(Classname,"func_door_rotating"))
		{
			if(g_Rentable[Property] == 0)
			{
				if(equali(Ownerz,Authid) && g_RentCost[Property] == 0)
				{
					ARP_AddHudItem(id,HUD_QUAT,0,"  Your property is not for rent")
					ARP_AddHudItem(id,HUD_QUAT,0,"Type /rent <Price> to set a price")
				}
				else if(!equali(g_RenterAuth[Property],""))
				{
					ARP_AddHudItem(id,HUD_QUAT,0,"Rented By: %s",g_RenterAuth[Property])
				}
			}
			else
			{								    
				ARP_AddHudItem(id,HUD_QUAT,0,"    For Rent: %i per hour",g_RentCost[Property])
				ARP_AddHudItem(id,HUD_QUAT,0,"To Rent: Type /rent <#ofHours>")
			}
		}
	}
	return
}
*/
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
